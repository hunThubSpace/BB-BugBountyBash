shodan_api="XXX"

# cookie abuseipdb
abuseipdb_session="XXX"

# viewdns cookie
cf_clearance="XXX"

# SRC token
SRC_ACCESS_TOKEN=sgp_XXX


# --------------> Extract Subdomains <--------------
bb_shodan_subs() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    shosubgo -d $input -s $shodan_api 2> /dev/null | grep -v -e  "\*" -e  "No subdomains"
}

bb_rapiddns_subs() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    grep_pattern=`echo $input | sed "s/\./\\\./g"`
    curl -s "https://rapiddns.io/subdomain/$input?full=1"  | grep -Eo '[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}' | grep -E "($grep_pattern)$" | sort -u
}

bb_assetfinder_subs() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    assetfinder --subs-only $input | sort -u
}

bb_subfinder_subs() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    subfinder -silent -all -duc -d $input
}

bb_wayback_subs() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    gauplus -t 1 -subs $input -random-agent  | sed "s/\^M//g" | sed "s/\*.//g" | sed -E "s/^\.//g" | cut -d / -f3 | cut -d : -f 1 | sort -u
}

bb_sslcert_subs() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    grep_pattern=`echo $input | cut -d ":" -f 1`
    true | openssl s_client -connect $input 2>/dev/null | openssl x509 -noout -text 2> /dev/null | grep "DNS" | tr ',' '\n' | cut -d ":" -f2  | sed "s/\*\.//" | grep -E ".+($grep_pattern)$" | sort -u 2> /dev/null
}

bb_crtsh_subs() {
    if [ -z "$1" ]; then 
        read -r domain
    else 
        domain="$1"
    fi

    query=$(cat <<-END
        SELECT ci.NAME_VALUE FROM certificate_and_identities ci WHERE plainto_tsquery('certwatch', '$domain') @@ identities(ci.CERTIFICATE)
END
    )

    max_attempts=5
    attempt=0
    result=""

    while [ $attempt -lt $max_attempts ]; do
        result=$(echo "$query" | psql -t -h crt.sh -p 5432 -U guest certwatch 2>/dev/null)
        if [ $? -eq 0 ]; then
            break
        fi
        attempt=$((attempt + 1))
        sleep 2
    done

    if [ $attempt -eq $max_attempts ]; then
        return 1
    fi

    echo "$result" | sed 's/ //g' | egrep ".*\.$domain" | sed 's/*\.//g' | tr '[:upper:]' '[:lower:]' | sort -u
}

bb_abuseipdb_subs(){
    abuseIPDB_cookie="cookie: abuseipdb_session=$abuseipdb_session"
    abuseIPDB_user_agent="user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    curl -s "https://www.abuseipdb.com/whois/$input" -H "$abuseIPDB_cookie" -H "$abuseIPDB_user_agent" | grep -E '<li>\w.*</li>' | sed -E 's/<\/?li>//g' | sed -e "s/$/.$input/"
    unset abuseIPDB_cookie; unset abuseIPDB_user_agent
}


# --------------> Wordlists <--------------
bb_wlgen_assetnote() {
    cd /opt/wordlists/
	wget -nv https://wordlists-cdn.assetnote.io/data/manual/best-dns-wordlist.txt
	wget -nv https://wordlists-cdn.assetnote.io/data/manual/2m-subdomains.txt
	cat best-dns-wordlist.txt 2m-subdomains.txt | tr '[:upper:]' '[:lower:]' | sort -u > static_dns_assetnote.txt
	rm -rf best-dns-wordlist.txt 2m-subdomains.txt; cd - > /dev/null
}

bb_wlgen_4char() {
    crunch 1 4 abcdefghijklmnopqrstuvwxyz1234567890 > /opt/wordlists/static_dns_4char.txt 2> /dev/null
}

bb_wlgen_chaos() {
    cd /opt/wordlists
    echo "-e *.*" | bb_chaos_download; rm -rf *.zip.1
    cat chaos/* | cut -d "." -f 1 | sort -u | grep -v -E "\*" | grep -v -E "\_" > static_dns_chaos.txt; rm -rf /opt/wordlists/chaos; cd ~
}

bb_wlgen_alljhaddix() {
    cd /opt/wordlists/
	wget -nv -O static_dns_jhaddix.txt  https://gist.githubusercontent.com/jhaddix/f64c97d0863a78454e44c2f7119c2a6a/raw/96f4e51d96b2203f19f6381c8c545b278eaa0837/all.txt
	cat static_dns_jhaddix.txt | sort -u > static_dns_jhaddix.1.txt
    mv static_dns_jhaddix.1.txt static_dns_jhaddix.txt
	rm -rf static_dns_jhaddix.1.txt; cd - > /dev/null
}

bb_wlgen_nokovo() {
    cd /opt/wordlists/
	wget -nv -O static_dns_nokovo.txt https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Discovery/DNS/n0kovo_subdomains.txt
	cd - > /dev/null
}

bb_wlgen_dynamic() {
    cd /opt/wordlists/
    wget -nv https://raw.githubusercontent.com/AlephNullSK/dnsgen/master/dnsgen/words.txt
    wget -nv https://raw.githubusercontent.com/infosec-au/altdns/master/words.txt
    cat words.txt words.txt.1 | sort -u > dynamic_dnsgalt.txt; rm words.txt words.txt.1; cd - > /dev/null
}

bb_wlgen_dynamic_pertarget() {
    wget -nv -O "/opt/wordlists/words1.txt" https://raw.githubusercontent.com/AlephNullSK/dnsgen/master/dnsgen/words.txt
    wget -nv -O /opt/wordlists/words2.txt https://raw.githubusercontent.com/infosec-au/altdns/master/words.txt
    cat /opt/wordlists/words1.txt /opt/wordlists/words2.txt | sort -u > /opt/wordlists/dynamic_dnsgalt.txt
    rm /opt/wordlists/words1.txt /opt/wordlists/words2.txt
    altdns -i $1 -w /opt/wordlists/dynamic_dnsgalt.txt -o /tmp/altdns.tmp
    cat $1 | dnsgen - -w /opt/wordlists/dynamic_dnsgalt.txt | sort -u > /tmp/dnsgen.tmp
    cat /tmp/dnsgen.tmp /tmp/altdns.tmp | sort -u > /opt/wordlists/dnsbrute_wordlist.txt
    cat /opt/wordlists/dnsbrute_wordlist.txt
    rm -rf /tmp/dnsgen.tmp /tmp/altdns.tmp
}

# --------------> DNS brute force <--------------
bb_dns_static() {
    if [[ "$1" == "-" ]]; then input=$(cat); else input="$1"; fi
    puredns resolve $2 --rate-limit 900 -r ~/.resolvers
}

# --------------> Live Subdomains <--------------
bb_livesubs_httpx() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    echo "$input" | httpx -silent -follow-host-redirects -title -status-code -cdn -tech-detect \
    -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15" -threads 1
    #-H "Referer: https://$input"
}

# --------------> Others <--------------
ssh_users() {
    echo "[>] $(date)\n";
    ps aux | grep sshd | grep -vE "auto|listener|priv|root@pts" | rev | cut -d ' ' -f 1,6 | rev
}

bb_get_cert_details() {
    if [[ $# -eq 1 ]]; then
        input="$1"
        echo | openssl s_client -showcerts -servername "$input" -connect "$input" 2>/dev/null | openssl x509 -inform pem -noout -text 2> /dev/null
    else
        while read -r input; do
            echo | openssl s_client -showcerts -servername "$input" -connect "$input" 2>/dev/null | openssl x509 -inform pem -noout -text 2> /dev/null
        done
    fi
}

bb_get_cert_brief() {
    if [[ $# -eq 1 ]]; then
        input="$1"
        echo | openssl s_client -showcerts -servername "$input" -connect "$input" 2>/dev/null | openssl x509 -inform pem -noout -text 2> /dev/null \
        | grep -E "(Issuer|Subject:|DNS:)" | grep -vE "(Issuers)" | sed "s/ //g"
    else
        while read -r input; do
            echo | openssl s_client -showcerts -servername "$input" -connect "$input" 2>/dev/null | openssl x509 -inform pem -noout -text 2> /dev/null \
            | grep -E "(Issuer|Subject:|DNS:)" | grep -vE "(Issuers)" | sed "s/ //g"
        done
    fi
}

bb_get_cert_subdomain() {
    if [[ $# -eq 1 ]]; then
        input="$1"
        echo | openssl s_client -showcerts -servername "$input" -connect "$input" 2>/dev/null | openssl x509 -inform pem -noout -text 2> /dev/null \
        | grep "DNS:" | grep -v "Issuers" | sed "s/ //g" | sed "s/,/\n/g" | tr -d "DNS:" | sed "s/*.//g" | sort -u
    else
        rm -rf .tmp
        while read -r input; do
            echo | openssl s_client -showcerts -servername "$input" -connect "$input" 2>/dev/null | openssl x509 -inform pem -noout -text 2> /dev/null \
            | grep "DNS:" | grep -v "Issuers" | sed "s/ //g" | sed "s/,/\n/g" | tr -d "DNS:" | sed "s/*.//g" >> .tmp
        done
        cat .tmp | sort -u; rm -rf .tmp
    fi
}

bb_get_cert_subdomain_nuclei(){
    if [[ $# -eq 1 ]]; then
        input="$1"
        echo $input | nuclei -silent -t ~/nuclei-templates/ssl/ssl-dns-names.yaml -j | jq -r '.["extracted-results"][]' | sort -u
    else
        rm -rf .tmp
        while read -r input; do
            echo | openssl s_client -showcerts -servername "$input" -connect "$input" 2>/dev/null | openssl x509 -inform pem -noout -text 2> /dev/null \
            | grep "DNS:" | grep -v "Issuers" | sed "s/ //g" | sed "s/,/\n/g" | tr -d "DNS:" | sed "s/*.//g" >> .tmp
        done
        cat .tmp | sort -u; rm -rf .tmp
    fi
}

bb_email2domain_viewdns() {
    cf_clearance="$cf_clearance"
    useragent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
    if [[ $# -eq 1 ]]; then
        input="$1"
        curl "https://viewdns.info/reversewhois/?q=$input" -H "cookie: cf_clearance=$cf_clearance" -H "user-agent: $useragent" 2> /dev/null \
        | grep -oE "<tr>(.+)</tr>" | sed -E "s_(<tr>|</tr>)_\n_g" | grep -E "^(<td>\w+)" | grep -v "Domain Name" | cut -d ">" -f 2 | cut -d "<" -f 1 | sort -u
    else
        rm -rf .tmp
        while read -r input; do
            curl "https://viewdns.info/reversewhois/?q=$input" -H "cookie: cf_clearance=$cf_clearance" -H "user-agent: $useragent" 2> /dev/null \
            | grep -oE "<tr>(.+)</tr>" | sed -E "s_(<tr>|</tr>)_\n_g" | grep -E "^(<td>\w+)" | grep -v "Domain Name" | cut -d ">" -f 2 | cut -d "<" -f 1 >> .tmp
        done
        cat .tmp | sort -u; rm -rf .tmp
    fi   
}


bb_subdomain_dns_rapiddns() {
    if [[ $# -eq 1 ]]; then
        input="$1"
        curl -s "https://rapiddns.io/subdomain/$input?full=1" | grep -Eo '[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}' | grep "$input" | sort -u
    else
        while read -r input; do
            curl -s "https://rapiddns.io/subdomain/$input?full=1" | grep -Eo '[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}' | grep "$input" | sort -u
        done
    fi
}

bb_cidr_remove_cdn() {
    input=$(cat)
    if [[ -f "$input" ]]; then
        cat "$input" | mapcidr -silent | cdncheck -silent -e
    else
        echo "$input" | mapcidr -silent | cdncheck -silent -e
    fi
}

bb_asn2cidr_details() {
    if [[ $# -eq 1 ]]; then
        input="$1"
        curl -s "https://api.bgpview.io/asn/$input/prefixes" \
        | jq -r '["Prefix", "Name", "Description", "Country Code"], (.data.ipv4_prefixes[] | [.prefix, .name, (.description // "N/A"), .country_code]) | @tsv' 2> /dev/null \
        | awk -F'\t' '{printf "%-24s %-40s %-50s %s\n", $1, $2, $3, $4}'
    else
        printf "%-24s %-40s %-50s %s\n" "Prefix" "Name" "Description" "Country Code"
        while read -r input; do
            curl -s "https://api.bgpview.io/asn/$input/prefixes" \
            | jq -r '(.data.ipv4_prefixes[] | [.prefix, .name, (.description // "N/A"), .country_code]) | @tsv' 2> /dev/null \
            | awk -F'\t' '{printf "%-24s %-40s %-50s %s\n", $1, $2, $3, $4}'
        done
    fi
}

bb_asn2cidr() {
    if [[ $# -eq 1 ]]; then
        input="$1"
        curl -s "https://api.bgpview.io/asn/$input/prefixes" | jq -r ".data.ipv4_prefixes[].prefix" 2> /dedv/null
    else
        while read -r input; do
            curl -s "https://api.bgpview.io/asn/$input/prefixes" | jq -r ".data.ipv4_prefixes[].prefix" 2> /dedv/null
        done
    fi
}


bb_ipcidr2asn_details() {
    printf "%-7s | %-16s | %-19s | %-2s | %-8s | %-10s | %-20s\n" "ASN" "IP" "BGP Prefix" "CC" "Registry" "Allocated" "AS Name"
    if [[ $# -eq 1 ]]; then
        input="$1"
        whois -h whois.cymru.com -v $input | grep -vE "Warning| BGP Prefix"
    else
        input=$(cat);
        whois -h whois.cymru.com -v $input | grep -vE "Warning| BGP Prefix"
    fi
}

bb_ipcidr2asn() {
    if [[ $# -eq 1 ]]; then
        input="$1"
        whois -h whois.cymru.com -v $input | grep -vE "Warning| BGP Prefix" | cut -d " " -f 1
    else
        while read -r input; do
            whois -h whois.cymru.com -v $input | grep -vE "Warning| BGP Prefix" | cut -d " " -f 1 >> .tmp
        done
        cat .tmp | sort -u; rm -rf .tmp
    fi
}

bb_ipscan_naabu(){
    ports="80,8000,8080,8880,2052,2082,2086,2095,443,2053,2083,2087,2096,8443,10443"
    if [[ $# -eq 1 ]]; then
        input="$1"
        echo $input | mapcidr -silent | naabu -p "$ports" -silent
    else
        input=$(cat)
        if [[ -f "$input" ]]; then
            cat "$input" | mapcidr -silent | naabu -p "$ports" -silent
        else
            echo "$input" | mapcidr -silent | naabu -p "$ports" -silent
        fi
    fi
}

bb_ipscan_masscan(){
    ports="80,8000,8080,8880,2052,2082,2086,2095,443,2053,2083,2087,2096,8443,10443"
    if [[ $# -eq 1 ]]; then
        input="$1"
        masscan $input --open --ports "$ports" 2> /dev/null | grep "open" | awk '{print $6 ":" $4}' | cut -d "/" -f 1
    else
        input=$(cat)
        if [[ -f "$input" ]]; then
            masscan $input --open --ports "$ports" 2> /dev/null | grep "open" | awk '{print $6 ":" $4}' | cut -d "/" -f 1   
        else
            masscan $input --open --ports "$ports" 2> /dev/null | grep "open" | awk '{print $6 ":" $4}' | cut -d "/" -f 1
        fi
    fi
}

bb_get_ptr(){
    if [[ $# -eq 1 ]]; then
        input="$1"
        echo $input | mapcidr -silent | dnsx -silent -resp-only -ptr | sort -u
    else
        input=$(cat)
        if [[ -f "$input" ]]; then
            cat $input | mapcidr -silent | dnsx -silent -resp-only -ptr | sort -u
        else
            echo $input | mapcidr -silent | dnsx -silent -resp-only -ptr | sort -u
        fi
    fi
}

bb_get_ptr_cert(){
    if [[ $# -eq 1 ]]; then
        input="$1"
        echo $input | mapcidr -silent | hakip2host | cut -d " " -f 3 | sort -u
    else
        input=$(cat)
        if [[ -f "$input" ]]; then
            cat $input | mapcidr -silent | hakip2host | cut -d " " -f 3 | sort -u
        else
            echo $input | mapcidr -silent | hakip2host | cut -d " " -f 3 | sort -u
        fi
    fi
}

bb_chaos_search() {
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    curl -s "https://chaos-data.projectdiscovery.io/index.json" | jq ".[].URL" --raw-output | grep $input
}

bb_chaos_download() {
    rm -rf chaos; mkdir -p chaos; cd chaos
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    curl -s "https://chaos-data.projectdiscovery.io/index.json" | jq ".[].URL" --raw-output | grep $input > .tmp
    for link in $(cat .tmp); do wget -nv "$link"; done
    for file in $(ls); do unzip -qq $file 2> /dev/null; done; rm -rf *.zip; rm -rf .tmp; cd - 2> /dev/null
}

bb_github_subdomain(){
    export SRC_ENDPOINT=https://sourcegraph.com
    export SRC_ACCESS_TOKEN=$SRC_ACCESS_TOKEN
    if [[ $# -eq 1 ]]; then input="$1"; else input=$(cat); fi
    q=$(echo $input | sed -e 's/\./\\\./g')
    src search -json '([a-z\-]+)?:?(\/\/)?([a-zA-Z0-9]+[.])+('${q}') count:5000 fork=yes archive:yes' \
    | jq -r '.Results[] | .lineMatches[].preview, .file.path' | grep -oiE '([a-zA-Z0-9]+[.])+('${q}')' | awk '{print to lower($0)}' | sort -u
    unset SRC_ENDPOINT; unset SRC_ACCESS_TOKEN
}

bb_resfile_gen() {
    touch ~/.resolvers
    echo 8.8.4.4 > ~/.resolvers
    echo 129.250.35.251 >> ~/.resolvers
    echo 208.67.222.222 >> ~/.resolvers     
}
